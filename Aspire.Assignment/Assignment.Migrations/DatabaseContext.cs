using Microsoft.EntityFrameworkCore;
using Assignment.Contracts.Data.Entities;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Assignment.Contracts.Data.Entities.Identity;

namespace Assignment.Migrations
{
    public class DatabaseContext : IdentityDbContext<ApplicationUser,ApplicationRole,Guid>
    {
        public DatabaseContext(DbContextOptions<DatabaseContext> options) : base(options)
        {
            ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            //Configuring AutogeneratedID for Category Table using Fluent API
            builder.Entity<Category>()
            .Property(category => category.Id)
            .ValueGeneratedOnAdd();

             //Configuring AutogeneratedID for Product Table using Fluent API
            builder.Entity<Product>()
            .Property(product => product.Id)
            .ValueGeneratedOnAdd();

            //Comfiguring AutogeneratedId for Cart Table.
            builder.Entity<Cart>()
            .Property(cart => cart.Id)
            .ValueGeneratedOnAdd();

            //Comfiguring AutogeneratedId for CartProduct Table.
            builder.Entity<CartProduct>()
            .Property(cartProduct => cartProduct.ID)
            .ValueGeneratedOnAdd();


            //Adding Many to Many relationship for Products and Cart Table
            builder.Entity<Cart>().HasMany(product => product.CartProducts)
            .WithOne(cart => cart.Cart)
            .OnDelete(DeleteBehavior.Cascade);

            builder.Entity<Product>().HasMany(cart => cart.CartProducts)
            .WithOne(product => product.Product)
            .OnDelete(DeleteBehavior.Cascade);


        }

        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            foreach (var item in ChangeTracker.Entries<BaseEntity>().AsEnumerable())
            {
                item.Entity.AddedOn = DateTime.Now;
            }

            return base.SaveChangesAsync(cancellationToken);
        }

        public DbSet<Address> Addresses { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<Cart> Carts { get; set; }
        public DbSet<Category> Categories { get; set; }
    }
}